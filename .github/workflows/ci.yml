name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pafar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pafar_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "STRIPE_SECRET_KEY=sk_test_fake_key" >> .env
        echo "GOOGLE_MAPS_API_KEY=fake_api_key" >> .env

    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head

    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 app tests --max-line-length=100 --exclude=migrations
        black --check app tests
        isort --check-only app tests

    - name: Run unit tests
      working-directory: ./backend
      run: |
        pytest tests/test_models*.py tests/test_services*.py -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=85

    - name: Run integration tests
      working-directory: ./backend
      run: |
        pytest tests/test_api_integration*.py -v --maxfail=5 --timeout=30

    - name: Run end-to-end tests
      working-directory: ./backend
      run: |
        pytest tests/test_e2e_user_flows*.py -v --maxfail=3 --timeout=60

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:run -- --coverage

    - name: Run component tests
      working-directory: ./frontend
      run: npm run test:run -- --reporter=verbose --coverage.threshold.lines=80 --coverage.threshold.functions=80 --coverage.threshold.branches=75

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Mobile Tests
  mobile-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          mobile/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('mobile/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Install dependencies
      working-directory: ./mobile
      run: flutter pub get

    - name: Generate code
      working-directory: ./mobile
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Run linting
      working-directory: ./mobile
      run: flutter analyze

    - name: Run unit tests
      working-directory: ./mobile
      run: flutter test --coverage

    - name: Run widget tests
      working-directory: ./mobile
      run: flutter test test/features/ --coverage --test-randomize-ordering-seed=random

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pafar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Set up backend environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pafar_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env

    - name: Run database migrations
      working-directory: ./backend
      run: alembic upgrade head

    - name: Start backend server
      working-directory: ./backend
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview -- --port 3000 --host 0.0.0.0 &
        sleep 5

    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: ./frontend
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter for Python
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run npm audit for Node.js
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high --json > npm-audit-report.json || true

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pafar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Set up environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pafar_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env

    - name: Run database migrations
      working-directory: ./backend
      run: alembic upgrade head

    - name: Start backend server
      working-directory: ./backend
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run performance tests
      working-directory: ./backend
      run: |
        locust -f tests/performance/locustfile.py --headless -u 50 -r 10 -t 60s --host=http://localhost:8000

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deployment Preview (for PRs)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests]
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: pafar-backend:preview
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: pafar-frontend:preview
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Comment PR with preview info
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Preview build completed successfully! All tests passed.'
          })

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests, e2e-tests]
    if: failure()

    steps:
    - name: Notify team on failure
      uses: actions/github-script@v6
      with:
        script: |
          const failedJobs = [
            ${{ needs.backend-tests.result == 'failure' && '"Backend Tests"' || 'null' }},
            ${{ needs.frontend-tests.result == 'failure' && '"Frontend Tests"' || 'null' }},
            ${{ needs.mobile-tests.result == 'failure' && '"Mobile Tests"' || 'null' }},
            ${{ needs.e2e-tests.result == 'failure' && '"E2E Tests"' || 'null' }}
          ].filter(job => job !== null);
          
          if (failedJobs.length > 0) {
            github.rest.issues.createComment({
              issue_number: context.issue.number || 1,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ CI Pipeline Failed!\n\nFailed jobs: ${failedJobs.join(', ')}\n\nPlease check the logs and fix the issues.`
            });
          }