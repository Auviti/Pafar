name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test before deployment
  test:
    uses: ./.github/workflows/ci.yml

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to production
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ vars.DOMAIN_NAME }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory
      run: |
        ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "mkdir -p /opt/pafar"

    - name: Copy deployment files
      run: |
        scp -r docker-compose.prod.yml nginx.prod.conf monitoring/ scripts/ \
          ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }}:/opt/pafar/

    - name: Create environment file
      run: |
        ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "cat > /opt/pafar/.env << EOF
        # Database Configuration
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        
        # Redis Configuration
        REDIS_URL=${{ secrets.REDIS_URL }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        
        # Application Configuration
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ENVIRONMENT=production
        
        # External Services
        STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
        GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
        
        # URLs
        API_URL=https://${{ vars.DOMAIN_NAME }}/api
        WS_URL=wss://${{ vars.DOMAIN_NAME }}/ws
        
        # Monitoring
        GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
        EOF"

    - name: Pull latest images
      run: |
        ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd /opt/pafar
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker-compose -f docker-compose.prod.yml pull
        "

    - name: Deploy application
      run: |
        ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd /opt/pafar
          
          # Create backup of current deployment
          if docker-compose -f docker-compose.prod.yml ps -q | grep -q .; then
            echo 'Creating backup before deployment...'
            docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U \$POSTGRES_USER \$POSTGRES_DB | gzip > backup_pre_deploy_\$(date +%Y%m%d_%H%M%S).sql.gz
          fi
          
          # Deploy with zero-downtime strategy
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Wait for services to be healthy
          echo 'Waiting for services to be healthy...'
          timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q \"Up (healthy)\"; do sleep 5; done'
          
          # Run database migrations
          docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
          
          # Clean up old images
          docker image prune -f
        "

    - name: Verify deployment
      run: |
        ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd /opt/pafar
          
          # Check service health
          if curl -f https://${{ vars.DOMAIN_NAME }}/health; then
            echo 'Deployment verification successful'
          else
            echo 'Deployment verification failed'
            exit 1
          fi
          
          # Show running services
          docker-compose -f docker-compose.prod.yml ps
        "

    - name: Setup monitoring
      run: |
        ssh ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd /opt/pafar
          
          # Setup backup cron job
          chmod +x scripts/setup-backup-cron.sh
          sudo ./scripts/setup-backup-cron.sh
          
          # Configure log rotation
          sudo cp monitoring/logrotate.conf /etc/logrotate.d/pafar
        "

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow