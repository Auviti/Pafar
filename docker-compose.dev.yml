
services:
  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    restart: always
   
    networks:
      - webnet
    # optional healthcheck to confirm it's alive
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s
  
  users-db:
    image: postgres:16-alpine
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    volumes:
      - users-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  userservice:
    build:
      context: ./backend/userservice
      dockerfile: Dockerfile.dev
    container_name: userservice
    depends_on:
      kafka:
        condition: service_healthy
      users-db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - webnet
    volumes:
      - ./backend/userservice:/usr/src/app
    env_file:
      - ./backend/userservice/.env

  # # Booking Service
  # bookingservice:
  #   build:
  #     context: ./backend/bookingservice
  #     dockerfile: Dockerfile.dev
  #   container_name: bookingservice
  #   ports:
  #     - "8001:8001"
  #   restart: always
  #   env_file:
  #     - ./backend/bookingservice/.env
  #   volumes:
  #     - ./backend/bookingservice:/usr/src/app
  #     - /usr/src/app/venv
  #   networks:
  #     - webnet
  #   depends_on:
  #     - kafka

  # # Bookings Database (PostgreSQL)
  # bookings-db:
  #   image: postgres:16-alpine3.20
  #   container_name: bookings-db
  #   restart: always
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: bookings_db
  #   volumes:
  #     - bookings-db-data:/var/lib/postgresql/data
  #   ports:
  #     - "5433:5432"
  #   networks:
  #     - webnet
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "postgres", "-d", "bookings_db"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  
  
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "5173:5173"
    restart: always
    networks:
      - webnet
    

networks:
  webnet:
    driver: bridge

volumes:
  users-db-data:
    
  bookings-db-data:
    
  analytics-db-data:

  pgadmin_data:
    
