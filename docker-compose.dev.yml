
services:
  zookeeper:
    image: 'zookeeper'
    container_name: zookeeper
    ports:
      - '2181:2181'
    restart: always
    env_file:
      - ./backend/userservice/.env  # This loads the variables from your .env file
    networks:
      - webnet
  
  kafka:
    image: 'confluentinc/cp-kafka'
    container_name: kafka
    ports:
      - '9092:9092'
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    env_file:
      - ./backend/userservice/.env  # This loads the variables from your .env file
    networks:
      - webnet


  userservice:
    image: userservice:latest
    container_name: userservice
    build:
      context: ./backend/userservice
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    restart: always
    
    env_file:
      - ./backend/userservice/.env  # This loads the variables from your .env file
    volumes:
      - ./backend/userservice:/usr/src/app
      - /usr/src/app/venv
    networks:
      - webnet
    depends_on:
      - kafka
      - users-db
  
  users-db:
    image: postgres:16-alpine3.20
    container_name: users-db
    restart: always
    environment:
      POSTGRES_USER: your_username
      POSTGRES_PASSWORD: your_password
      POSTGRES_PORT: 5432
      POSTGRES_DB: your_db
      # POSTGRES_HOST_AUTH_METHOD: trust to allow all connections without a password. This is *not* recommended.
    volumes:
      - users-db-data:/var/lib/postgresql/data
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "your_username", "-d", "your_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  # bookingservice:
  #   image: bookingservice:latest
  #   container_name: bookingservice
  #   build:
  #     context: ./backend/bookingservice  # Update with the correct path to your Booking Service's source code
  #   ports:
  #     - "${BOOKINGPORT}:${BOOKINGPORT}"
  #   restart: always
  #   environment:
  #     - KAFKA_HOST=${KAFKA_HOST}
  #     - BOOKINGPORT=${BOOKINGPORT}
  #     - BOOKINGIP=${BOOKINGIP}
  #     - BOOKING_CREATED_TOPIC=${BOOKING_CREATED_TOPIC}
  #     - BOOKING_UPDATED_TOPIC=${BOOKING_UPDATED_TOPIC}
  #     - BOOKING_CANCELLED_TOPIC=${BOOKING_CANCELLED_TOPIC}
  #     - BOOKING_COMPLETED_TOPIC=${BOOKING_COMPLETED_TOPIC}
  #     - BOOKING_PAYMENT_RECEIVED_TOPIC=${BOOKING_PAYMENT_RECEIVED_TOPIC}
  #     - BOOKING_NOTIFICATION_TOPIC=${BOOKING_NOTIFICATION_TOPIC}
  #   env_file:
  #     - ./backend/bookingservice/.env  # This loads environment variables from the .env file for the Booking Service
  #   volumes:
  #     - ./backend/bookingservice:/usr/src/app
  #     - /usr/src/app/venv  # Virtual environment (optional, based on your setup)
  #   networks:
  #     - webnet
  #   depends_on:
  #     - kafka

  # bookings-db:
  #   image: postgres:16-alpine3.20
  #   container_name: bookings-db
  #   restart: always
  #   environment:
  #     POSTGRES_USER: "${POSTGRESQL_USER}"
  #     POSTGRES_PASSWORD: "${POSTGRESQL_PASSWORD}"
  #     POSTGRESQL_SERVER: "${POSTGRESQL_SERVER}"
  #     POSTGRESQL_PORT: "${POSTGRESQL_PORT}"
  #     POSTGRESQL_DB: "${POSTGRESQL_DB}"
  #     DOMAIN: "${DOMAIN}"
  #     ENVIRONMENT: "${ENVIRONMENT}"
  #     BACKEND_CORS_ORIGINS: "${BACKEND_CORS_ORIGINS}"
  #     SQLITE_DB_PATH: "${SQLITE_DB_PATH}"
  #   volumes:
  #     - bookings-db-data:/var/lib/postgresql/data
  #   networks:
  #     - webnet
      
  # analyticsservice:
  #   image: analyticsservice:latest
  #   container_name: analyticsservice
  #   build:
  #     context: ./backend/analyticsservice  # Update with the correct path to your Analytics Service's source code
  #   ports:
  #     - "${ANALYTICS_PORT}:${ANALYTICS_PORT}"
  #   restart: always
  #   environment:
  #     - KAFKA_HOST=${KAFKA_HOST}
  #     - ANALYTICS_PORT=${ANALYTICS_PORT}
  #     - ANALYTICS_IP=${ANALYTICS_IP}
  #     - ANALYTICS_REPORT_GENERATED_TOPIC=${ANALYTICS_REPORT_GENERATED_TOPIC}
  #     - ANALYTICS_DATA_PROCESSED_TOPIC=${ANALYTICS_DATA_PROCESSED_TOPIC}
  #     - ANALYTICS_USER_ACTIVITY_TOPIC=${ANALYTICS_USER_ACTIVITY_TOPIC}
  #     - ANALYTICS_BOOKING_STATS_TOPIC=${ANALYTICS_BOOKING_STATS_TOPIC}
  #     - ANALYTICS_PAYMENT_STATS_TOPIC=${ANALYTICS_PAYMENT_STATS_TOPIC}
  #     - REPORTS_TOPIC=${REPORTS_TOPIC}
  #   env_file:
  #     - ./backend/analyticsservice/.env  # This loads environment variables from the .env file for the Analytics Service
  #   volumes:
  #     - ./backend/analyticsservice:/usr/src/app
  #     - /usr/src/app/venv  # Virtual environment (optional, based on your setup)
  #   networks:
  #     - webnet
  #   depends_on:
  #     - kafka
  #     - bookings-db  # Assuming the Analytics Service interacts with the Bookings DB
  #     - payments-db  # Assuming the Analytics Service needs Payment Data
  #     - users-db  # Assuming the Analytics Service needs User Data
  
  # analytics-db:
  #   image: postgres:16-alpine3.20
  #   container_name: analytics-db
  #   restart: always
  #   environment:
  #     POSTGRES_USER: "${POSTGRESQL_USER}"
  #     POSTGRES_PASSWORD: "${POSTGRESQL_PASSWORD}"
  #     POSTGRESQL_SERVER: "${POSTGRESQL_SERVER}"
  #     POSTGRESQL_PORT: "${POSTGRESQL_PORT}"
  #     POSTGRESQL_DB: "${POSTGRESQL_DB}"
  #     DOMAIN: "${DOMAIN}"
  #     ENVIRONMENT: "${ENVIRONMENT}"
  #     BACKEND_CORS_ORIGINS: "${BACKEND_CORS_ORIGINS}"
  #     SQLITE_DB_PATH: "${SQLITE_DB_PATH}"
      
  #   volumes:
  #     - analytics-db-data:/var/lib/postgresql/data
  #   networks:
  #     - webnet
  
  # Frontend service configuration serving static files
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "5173:5173"
    restart: always
    # env_file:
    #   - ./frontend/env
    networks:
      - webnet

networks:
  webnet:
    external: true

volumes:
  users-db-data:
    external: true
  bookings-db-data:
    external: true
  analytics-db-data:
    external: true
